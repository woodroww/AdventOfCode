use colored::*;

fn add(a: String, b: String) -> String {
    format!("[{},{}]", a, b)
}

struct Explode {
    left: usize,
    right: usize,
    left_idx: usize,
    right_idx: usize,
}


fn explode(input: String) -> String {
// [[[[[9,8],1],2],3],4]
// [[[ [ [9,8] ,1],2],3],4]
// [[[ [[9,8],1] ,2],3],4]
// [[ [[[9,8],1],2] ,3],4]
// [ [[[[9,8],1],2],3] ,4]


// [[[0,[5,0]],[9,[1,0]]],[[8,0],[6,[3,3]]]]

// [[[[[9,8],1],2],3],4]
// [[[[9,8],1],2],3],4
// [[[[9,8],1],2],3]      4
// [[[9,8],1],2]     3      4
// [[9,8],1]     2     3      4
// [9,8],1      2     3      4
// [9,8]    1     2     3     4
// 9    8    1     2     3     4


// [[3,[2,[1,[7,3]]]],[6,[5,[4,[3,2]]]]]
// [ [ 3,[ 2,[ 1,[7,3] ] ] ], [ 6,[ 5,[ 4,[3,2] ] ] ] ]
// [ 3,[ 2,[ 1,[ 7,3]]]],[6,[5,[4,[3,2 ] ] ] ]

    let mut front: usize = 0;
    let mut back: usize = input.len() - 1;

    println!("{}", input);

    while front < back {

        let f = input.chars().nth(front).unwrap();
        let b = input.chars().nth(back).unwrap();

        //println!("{}", &input[front..back]);
        let open = input[front..back].find("[");
        let open = match open {
            Some(o) => o + front,
            None => return "".to_string(),
        };
        let close = input[..=back].rfind("]");
        let close = match close {
            Some(c) => c,
            None => return "".to_string(),
        };

        println!("{}", colorize_idxs(&input, open, close));
        front = open + 1;
        back = close - 1;
    }

    input
}

fn colorize_idxs(input: &String, front: usize, back: usize) -> String {
    let f = input.chars().nth(front).unwrap();
    let b = input.chars().nth(back).unwrap();
    let begin_chars = if front > 0 {
        input.chars().take(front).collect::<String>()
    } else {
        "".to_string()
    };
    let begin_char = input.chars().skip(front).take(1).collect::<String>();
    let middle = input.chars().skip(front+1).take(back-front-1).collect::<String>();
    let end_char = input.chars().skip(back).take(1).collect::<String>();
    let end_chars = if back < input.len() - 1 {
        input.chars().skip(back + 1).collect::<String>()
    } else {
        "".to_string()
    };
    format!("{}{}{}{}{}", begin_chars, begin_char.red(), middle, end_char.red(), end_chars)
}

#[test]
fn test_explode_1() {
    let input = "[[[[[9,8],1],2],3],4]";
    let expected = "[[[[0,9],2],3],4]";
    let result = explode(input.to_string());
    assert_eq!(expected, result);
}

#[test]
fn test_explode_2() {
    let input = "[7,[6,[5,[4,[3,2]]]]]";
    let expected = "[7,[6,[5,[7,0]]]]";
    let result = explode(input.to_string());
    assert_eq!(expected, result);
}

#[test]
fn test_explode_3() {
    let input = "[[6,[5,[4,[3,2]]]],1]";
    let expected = "[[6,[5,[7,0]]],3]";
    let result = explode(input.to_string());
    assert_eq!(expected, result);
}

#[test]
fn test_explode_4() {
    let input = "[[3,[2,[1,[7,3]]]],[6,[5,[4,[3,2]]]]]";
    let expected = "[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]";
    let result = explode(input.to_string());
    assert_eq!(expected, result);
}

#[test]
fn test_explode_5() {
    let input = "[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]";
    let expected = "[[3,[2,[8,0]]],[9,[5,[7,0]]]]";
    let result = explode(input.to_string());
    assert_eq!(expected, result);
}

fn split(input: String) -> String {
    input
}

fn check(input: String) -> String {

    for c in input.chars() {

    }
    input
}

fn part_1(_input: String) -> i32 {
    let simple_1 = "[1,1]\n[2,2]\n[3,3]\n[4,4]".to_string();
    let simple_2 = "[1,1]\n[2,2]\n[3,3]\n[4,4]\n[5,5]".to_string();
    let simple_3 = "[1,1]\n[2,2]\n[3,3]\n[4,4]\n[5,5]\n[6,6]".to_string();

    let input = simple_2;
    println!("{}", input);
    let (first, _) = input.split_once("\n").unwrap();
    let mut prev_line = first.to_string();
    for line in input.lines().skip(1) {
        let mut result = add(prev_line.to_string(), line.to_string());
        println!("unchecked: {}", result);
        result = check(result);
        println!("result:    {}", result);
        prev_line = result;
    }



    0
}

fn part_2(_input: String) -> i32 {
    0
}

enum InputFile {
    Example,
    Real,
}

fn input_txt(input: InputFile) -> String {
    match input {
        InputFile::Example => {
            std::fs::read_to_string("example.txt")
                .expect("No example.txt file")
        },
        InputFile::Real => {
            std::fs::read_to_string("input.txt")
                .expect("No input.txt file")
        },
    }
}

struct BracketMatch {
    start: usize,
    end: usize,
}

fn find_matches(input: String) -> Vec<BracketMatch> {
    let stack: Vec<usize> = Vec::new();
    let result = Vec::new();
    for (i, c) in input.chars().enumerate() {

        if c == '[' {
            stack.push(i);
        } else if c == ']' {
            let top = stack.pop().unwrap();
            result.push(BracketMatch { start: top, end: i });
        }
    }

    result
}


fn main() {
    let input = input_txt(InputFile::Example);
    //println!("Part 1: {}", part_1(input.clone()));
    let mut stack: Vec<String> = Vec::new();
    let line = input.lines().nth(1).unwrap();
    //println!("line: {}", line);
    parse(line.to_string(), &mut stack);
    stack.iter().for_each(|item| println!("{}", item));
    //println!("Part 2: {}", part_2(input));
}

#[cfg(test)]
mod tests {
	use super::*;
    #[test]
    fn test_example_part_1() {
        let part_1_example_answer = 1;

        let input = input_txt(InputFile::Example);
		let result = part_1(input);
        assert_eq!(result, part_1_example_answer);
	}

    #[test]
    fn test_example_part_2() {
        let part_2_example_answer = 1;

        let input = input_txt(InputFile::Example);
		let result = part_2(input);
        assert_eq!(result, part_2_example_answer);
	}
}
